import asyncio
import datetime
from email import message
import time
import re

import inline as markups
import database as sql
import p2p

from aiogram import types
from aiogram.dispatcher import FSMContext, filters
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils import exceptions

from main import bot, dp, config, logger
from throttling import rate_limit, anti_bot


class dialogue(StatesGroup):
    in_search = State()
    in_dialogue = State()
    parameters = State()
    parameters_age = State()


class set_name(StatesGroup):
    enter_name = State()


class set_age(StatesGroup):
    enter_age = State()


class deposit(StatesGroup):
    select_payment_system = State()
    enter_sum = State()
    checkout = State()


class add_user_info(StatesGroup):
    enter_country = State()
    enter_gender = State()
    enter_age = State()


class edit_plans_adm(StatesGroup):
    enter_edit = State()
    enter_name = State()
    enter_time = State()
    enter_price = State()


class ap_broadcast(StatesGroup):
    enter_text = State()
    confirm = State()


class ap_add_ads(StatesGroup):
    enter_name = State()
    enter_time = State()
    enter_url = State()
    enter_chat_id = State()
    confirm = State()

# --- –ê–Ω—Ç–∏-–±–æ—Ç ---


@dp.message_handler(state=anti_bot.in_process)
async def msg_antibot_inprocess(message: types.Message):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∞–Ω—Ç–∏–±–æ—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∏
    '''
    await message.delete()
    generated_tuple = markups.generate_confirm_markup(message.from_user.id)
    markup = generated_tuple[0]
    subject = generated_tuple[1]
    await message.answer(f'‚ùó *–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç*\n\n_–ù–∞–π–¥–∏—Ç–µ_ *{subject}* _–Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ!_', parse_mode='Markdown', reply_markup=markup)

    return


@dp.message_handler(state=anti_bot.in_process_2)
async def msg_antibot_inprocess_2(message: types.Message):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∞–Ω—Ç–∏–±–æ—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∏
    '''
    await message.delete()
    generated_tuple = markups.generate_confirm_markup(message.from_user.id)
    markup = generated_tuple[0]
    subject = generated_tuple[1]
    await message.answer(f'‚ùó *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞*\n\n*–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç*\n\n_–ù–∞–π–¥–∏—Ç–µ_ *{subject}* _–Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ!_', parse_mode='Markdown', reply_markup=markup)

    return


@dp.message_handler(state=anti_bot.banned)
async def msg_antibot_banned(message: types.Message):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –±–∞–Ω–∞
    '''

    await message.delete()
    await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @membersonly5')

    return


@dp.callback_query_handler(state=anti_bot.banned)
async def callback_antibot_banned(callback: types.CallbackQuery):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –±–∞–Ω–∞
    '''

    await callback.message.delete()
    await bot.send_message(callback.from_user.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @membersonly5')

    return


# --- –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞ ---
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=[add_user_info.enter_country, add_user_info.enter_gender])
async def decline_cmds_on_register(message: types.Message):
    '''
    –ó–∞–ø—Ä–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    '''

    if message.text != '/start':
        await message.delete()
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!', disable_notification=True)

        return


@dp.callback_query_handler(lambda c: c.data, state=[dialogue.in_dialogue])
async def decline_callbacks_on_dialogue(callback: types.CallbackQuery, state=FSMContext):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
    '''
    await bot.send_message(callback.from_user.id, '‚ùóÔ∏è –¢—ã —Å–µ–π—á–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å: /stop', disable_notification=True)
    return


@dp.callback_query_handler(lambda c: c.data, state=[dialogue.in_search])
async def decline_callbacks_on_search(callback: types.CallbackQuery, state=FSMContext):
    '''
    –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    '''
    await bot.send_message(callback.from_user.id, '‚ùóÔ∏è –¢—ã —Å–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", –∏–ª–∏ –≤–≤–µ–¥–∏ /cancel', disable_notification=True)
    return


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), text=['/start', '/next', '/stop', '/menu', '/profile', '/help', '/search', 'üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', '‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'], state=dialogue.in_search)
async def decline_cmds_on_search(message: types.Message, state=FSMContext):
    await bot.send_message(message.from_user.id, '‚ùóÔ∏è –¢—ã —Å–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", –∏–ª–∏ –≤–≤–µ–¥–∏ /cancel', disable_notification=True)
    return


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), text=['/next', '/stop', '/menu', '/profile', '/help', '/search', 'üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', '‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'], state=dialogue.parameters)
async def decline_cmds_on_param(message: types.Message, state=FSMContext):
    await bot.send_message(message.from_user.id, '‚ùóÔ∏è –í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫,\n–∏–ª–∏ –Ω–∞–π–¥–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é /start', disable_notification=True)
    return


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), text=['/start', '/menu', '/profile', '/support', '/search', 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', 'üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', '‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'], state=dialogue.in_dialogue)
async def decline_cmds_on_dialogue(message: types.Message, state=FSMContext):
    '''
    –ó–∞–ø—Ä–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏
    '''

    await message.answer('‚ùóÔ∏è –¢—ã —Å–µ–π—á–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å: /stop', disable_notification=True)
    return


# --- CMDS ---
@rate_limit(limit=3)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), filters.CommandStart(), state='*')
async def cmd_start(message: types.Message, state=FSMContext):
    '''
    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã. –ö–æ–º–∞–Ω–¥–∞ "/start"
    '''

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if await sql.user_exists(user_id):

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        if await sql.session_exists(user_id) == True:
            try:
                await message.delete()

            except exceptions.MessageToDeleteNotFound as e:
                logger.debug(e)

            await message.answer(
                '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ [—Å—é–¥–∞](/stop),\n'
                '–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return

        await cmd_menu(message, state)
        await state.finish()

        return

    #  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()

    except exceptions.MessageToDeleteNotFound as e:
        logger.debug(e)

    await message.answer(
        'üëã *–ü—Ä–∏–≤–µ—Ç!*\n–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –≤–ø–µ—Ä–≤—ã–µ!\n'
        '*–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!*',
        disable_notification=True,
        parse_mode='Markdown'
    )
    await asyncio.sleep(1.8)
    await message.answer(
        '_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–∫—É–¥–∞ —Ç—ã —Ä–æ–¥–æ–º:_',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.add_country()
    )

    await add_user_info.enter_country.set()


@rate_limit(limit=3)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['menu'], state='*')
async def cmd_menu(message: types.Message, state=FSMContext):
    '''
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞. –ö–æ–º–∞–Ω–¥–∞ /menu
    '''

    user_id = message.from_user.id
    pod_menu = ReplyKeyboardMarkup(
        selective=True,
        resize_keyboard=True
    ).add('üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞').add('‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound as e:
        logger.debug(e)

    await bot.send_sticker(
        user_id,
        sticker='CAACAgEAAxkBAAEFQ1Fizu_3op323YnOob28RIZBpGLriAAC7AcAAuN4BAAB6DEEbU_xFOwpBA',
        disable_notification=True,
        reply_markup=pod_menu
    )

    await message.answer(
        '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.menu()
    )


@rate_limit(limit=2)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state=FSMContext):
    '''
    –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ö–æ–º–∞–Ω–¥–∞ /cancel
    '''

    user_id = message.from_user.id
    pod_menu = ReplyKeyboardMarkup(
        selective=True,
        resize_keyboard=True
    ).add('üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞').add('‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')

    await message.delete()

    if await sql.session_exists(user_id):
        await bot.send_message(user_id, '‚ùóÔ∏è –¢—ã —Å–µ–π—á–∞—Å –≤ –¥–∏–∞–ª–æ–≥–µ.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å: /stop', disable_notification=True)
        return

    await message.answer(
        '‚ùó *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞*',
        disable_notification=True,
        parse_mode='MarkdownV2',
        reply_markup=pod_menu
    )

    await sql.del_queue(user_id)
    await state.finish()


@rate_limit(limit=2)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['stop'], state='*')
async def cmd_stop(message: types.Message, state=FSMContext):
    '''
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ö–æ–º–∞–Ω–¥–∞ /stop
    '''

    user_id = message.from_user.id
    data = await sql.del_session(user_id)

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound:
        pass

    if not data:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        await message.answer(
            '‚ùóÔ∏è *–°–µ–π—á–∞—Å –≤—ã –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º*\n\n'
            '_–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ */search*_',
            disable_notification=True,
            parse_mode='MarkdownV2'
        )
        await state.finish()
        return False

    state_1 = dp.current_state(chat=data[1], user=data[1])
    state_2 = dp.current_state(chat=data[2], user=data[2])
    msgs_1, msgs_2, time_1, time_2 = 0, 0, 0, 0

    try:  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª-–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        statistics_1 = await state_1.get_data()
        statistics_2 = await state_2.get_data()

        if statistics_1:
            time_1 = int(time.time()) - int(statistics_1['time'])
            msgs_1 = statistics_1['msgs']

        if statistics_2:
            time_2 = int(time.time()) - int(statistics_2['time'])
            msgs_2 = statistics_2['msgs']

    except Exception:
        await state_1.finish()
        await state_2.finish()

    pod_menu = ReplyKeyboardMarkup(
        selective=True,
        resize_keyboard=True
    ).add('üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞').add('‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')

    try:
        await bot.send_message(
            data[1],
            f'‚ùóÔ∏è *–î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω.*\n–í—ã –æ–±—â–∞–ª–∏—Å—å *{time_1}* —Å–µ–∫. –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ *{msgs_1}* —Å–æ–æ–±—â–µ–Ω–∏–π',
            disable_notification=True,
            parse_mode='Markdown',
            reply_markup=pod_menu
        )

    except exceptions.BotBlocked:
        await asyncio.sleep(1)

    try:
        await bot.send_message(
            data[2],
            f'‚ùóÔ∏è *–î–∏–∞–ª–æ–≥ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω.*\n–í—ã –æ–±—â–∞–ª–∏—Å—å *{time_2}* —Å–µ–∫. –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ *{msgs_2}* —Å–æ–æ–±—â–µ–Ω–∏–π',
            disable_notification=True,
            parse_mode='Markdown',
            reply_markup=pod_menu
        )

    except exceptions.BotBlocked:
        await asyncio.sleep(1)

    await sql.add_user_stat(data[1], msgs_1, time_1, 0)
    await sql.add_user_stat(data[2], msgs_2, time_2, 0)
    await state_1.finish()
    await state_2.finish()


@rate_limit(limit=2)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['search'], state='*')
async def cmd_search(message: types.Message, state=FSMContext):
    '''
    –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ö–æ–º–∞–Ω–¥–∞ /search
    '''

    user_id = message.from_user.id
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ø—É–ª–µ
    session_exists = await sql.session_exists(user_id)

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound:
        pass

    if session_exists:
        await message.answer(
            '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –≤–≤–µ–¥–∏—Ç–µ /next'
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –≤–≤–µ–¥–∏—Ç–µ /stop',
            disable_notification=True
        )

        return

    user_info = await sql.get_user(user_id)
    markup_cancel = ReplyKeyboardMarkup(
        resize_keyboard=True,
        selective=True
    ).add('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')

    await message.answer(
        'üîç _–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.._',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markup_cancel
    )

    chat_two = await sql.get_queue_premium(user_info[3], user_info[4], user_info[5])

    if chat_two == 0:
        chat_two = await sql.get_queue()

    if chat_two == 0:
        await dialogue.in_search.set()
        await sql.add_queue(user_id, user_info[3], user_info[4], user_info[5])

        return

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    session = await sql.create_session(user_id, chat_two)

    if session:
        try:
            state_1 = dp.current_state(chat=user_id, user=user_id)
            state_2 = dp.current_state(chat=chat_two, user=chat_two)
            await state_1.set_state(dialogue.in_dialogue)
            await state_2.set_state(dialogue.in_dialogue)

            async with state_1.proxy() as data:
                data['time'] = int(time.time())
                data['msgs'] = 0
            async with state_2.proxy() as data:
                data['time'] = int(time.time())
                data['msgs'] = 0

        except exceptions.BotBlocked as e:
            await sql.del_queue(chat_two)
            await sql.del_session(chat_two)
            await dialogue.in_search.set()
            await sql.add_queue(user_id, user_info[3], user_info[4], user_info[5])

            return

        markup_stop = ReplyKeyboardMarkup(
            resize_keyboard=True,
            selective=True

        ).add('üõë –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')

        try:
            await bot.send_message(
                chat_two,
                'üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/next - –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                disable_notification=True,
                reply_markup=markup_stop
            )

        except exceptions.BotBlocked as e:
            await sql.del_queue(chat_two)
            await sql.del_session(chat_two)

            await state_1.set_state(dialogue.in_search)
            await sql.add_queue(user_id, user_info[3], user_info[4], user_info[5])

            return

        try:
            await message.answer(
                'üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/next - –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                disable_notification=True,
                reply_markup=markup_stop
            )

        except exceptions.BotBlocked as e:
            chat_two_info = sql.get_user(chat_two)
            await sql.del_queue(user_id)
            await sql.del_session(user_id)

            await state_2.set_state(dialogue.in_search)
            await sql.add_queue(chat_two, chat_two_info[3], chat_two_info[4], chat_two_info[5])

            return


@rate_limit(limit=5)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['next'], state='*')
async def cmd_next(message: types.Message, state=FSMContext):
    '''
    –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ö–æ–º–∞–Ω–¥–∞ /next
    '''

    if await sql.session_exists(message.from_user.id) == True:
        await cmd_stop(message, state)

    await cmd_search(message, state)


@rate_limit(limit=3)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['rules'], state='*')
async def cmd_rules(message: types.Message, state=FSMContext):
    '''
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞. –ö–æ–º–∞–Ω–¥–∞ /rules
    '''

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound as e:
        logger.debug(e)

    await message.answer(
        '''
*–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ*

*–ó–∞–ø—Ä–µ—â–µ–Ω–æ:*
‚Ä¢ –ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ (–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤);
‚Ä¢ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏;
‚Ä¢ –¥–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è (–¶–ü);
‚Ä¢ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ;
‚Ä¢ –ª—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º;
‚Ä¢ —Ä–∞—Å–æ–≤–∞—è, –ø–æ–ª–æ–≤–∞—è, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è;
‚Ä¢ –ø—Ä–æ–¥–∞–∂–∞ —á–µ–≥–æ-–ª–∏–±–æ;
‚Ä¢ –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram;
‚Ä¢ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ;
‚Ä¢ –æ–±–º–µ–Ω, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö 18+ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
‚Ä¢ –ü–æ—à–ª–æ–µ –∏–ª–∏ –≤—É–ª—å–≥–∞—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

*–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–∞–≤–∏–ª –≤—ã–¥–∞—ë—Ç—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.*
        ''',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.markup_back
    )


@rate_limit(limit=3)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['profile'], state='*')
async def cmd_profile(message: types.Message, state=FSMContext, user_id=None):
    '''
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö–æ–º–∞–Ω–¥–∞ /profile
    '''

    if user_id == None:
        user_id = message.from_user.id

    user_info = await sql.get_user(user_id)

    if not user_info:
        return

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound as e:
        logger.debug(e)

    gender = ''
    if user_info[3] == 0:
        gender = '–º—É–∂—Å–∫–æ–π'
    else:
        gender = '–∂–µ–Ω—Å–∫–∏–π'

    age = str(user_info[4])

    country = ''
    if user_info[5] == 'ru':
        country = '–†–æ—Å—Å–∏—è'
    elif user_info[5] == 'kz':
        country = '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'
    elif user_info[5] == 'bel':
        country = '–ë–µ–ª–∞—Ä—É—Å—å'
    elif user_info[5] == 'uk':
        country == '–£–∫—Ä–∞–∏–Ω–∞'
    elif user_info[5] == 'usa':
        country = '–°–®–ê'

    plan = await sql.user_is_premium(user_id)
    if plan == False:
        plan = '*–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*'
    else:
        plan = f'–¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ *{plan}*'

    reg_date = user_info[10]
    dt = str(datetime.timedelta(seconds=(int(time.time()) - reg_date)))
    dt = dt.replace('days', '–¥–Ω–µ–π')
    dt = dt.replace('day', '–¥–µ–Ω—å')

    await message.answer(
        f'''
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è *–ü–†–û–§–ò–õ–¨* „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è

üí∞ –ë–∞–ª–∞–Ω—Å: *{user_info[6]}* —Ä—É–±.

üîé ID: *{message.from_user.id}*
üë• –ò–º—è: *{user_info[2]}*
üë´ –ü–æ–ª: *{gender}*
üåç –°—Ç—Ä–∞–Ω–∞: *{country}*
üîû –í–æ–∑—Ä–∞—Å—Ç: *{age}*
‚≠ê –ü—Ä–µ–º–∏—É–º: {plan}
üìÖ –¢—ã —Å –Ω–∞–º–∏ —É–∂–µ *{dt}*

„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê* „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è

üìß –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info[8]}
üë§ –ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤: {user_info[11]}
‚ö†Ô∏è –ñ–∞–ª–æ–±: {user_info[9]}
        ''',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.markup_profile
    )


@rate_limit(limit=2)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['help'], state='*')
async def cmd_help(message: types.Message, state=FSMContext):
    '''
    –°–ø—Ä–∞–≤–∫–∞. –ö–æ–º–∞–Ω–¥–∞ /help
    '''

    try:
        await message.delete()
    except exceptions.MessageToDeleteNotFound as e:
        logger.debug(e)

    await message.answer(
        '‚ùì *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º* ‚ùì\n\n'
        '*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n'
        '/start - _–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã / –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é_\n'
        '/search - _–ø–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n'
        '/cancel - _–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n'
        '/next - _—Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫_\n'
        '/stop - _–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥_\n'
        '/menu - _–æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_\n'
        '/profile - _—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å / –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_\n'
        '/help - _–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É_\n\n',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.markup_back
    )
    #  –î–æ–±–∞–≤–∏—Ç—å Inline –∫–Ω–æ–ø–∫–∏ —Å FAQ


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['stat'], state='*')
async def cmd_stat(message: types.Message, state=FSMContext):
    '''
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É
    '''

    user_id = message.from_user.id
    stat = await sql.get_stats()
    logger.info(stat)

    await message.delete()
    await message.answer(
        f'''
„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê* „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è

–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: _{stat[1]}_
–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: _{stat[0]}_

–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏: _{0}_
–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: _{0}_
–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: _{0}_

–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å–µ–π—á–∞—Å: _{0}_

–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ _{0}_ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å—É–º–º—É _{0}_ —Ä—É–±.
–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: _{0}_

„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê* „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è

        ''',
        disable_notification=True,
        parse_mode='Markdown'
    )


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), commands=['adminp'], state=None)
async def cmd_adminp(message: types.Message, state=FSMContext):
    '''
    –ú–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    '''

    user_id = message.from_user.id

    await message.delete()

    if int(user_id) == int(config['ADMIN_ID']) or int(user_id) == 5386629469:

        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name}:{user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!')
        await bot.send_message(user_id,
                               '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è',
                               disable_notification=True,
                               reply_markup=markups.markup_admin_panel
                               )
    else:
        logger.info(
            f'{message.from_user.first_name}:{message.from_user.id}  —Å—Ç—É—á–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!')
        await message.answer(
            '‚ùó *–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n'
            '_–í–≤–µ–¥–∏—Ç–µ_ /help_, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!_',
            disable_notification=True,
            parse_mode='Markdown'
        )


# --- MSGs ---
@rate_limit(limit=1)
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=[dialogue.in_search, dialogue.in_dialogue, None], content_types=['text', 'sticker', 'video', 'photo', 'audio', 'voice', 'document'])
async def on_message(message: types.Message, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''

    user_id = message.from_user.id
    text = message.text

    if text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
        await cmd_cancel(message, state)

    elif text == 'üõë –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞':
        await cmd_stop(message, state)

    elif text == 'üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
        await cmd_search(message, state)

    elif text == '‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º':

        isPremium = await sql.user_is_premium(user_id)

        await message.delete()

        if isPremium == False:
            await bot.send_sticker(
                user_id,
                'CAACAgIAAxkBAAEFSfVi0brCXMU1zyEmZlerXUv_d6x-lwAClgADr8ZRGn4mRR4wlJbpKQQ',
                disable_notification=True
            )

            await message.answer(
                '_–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π_ *"–ü—Ä–µ–º–∏—É–º"*\n'
                '\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ *–ú–µ–Ω—é* _(/menu)_ -> ‚≠ê *–ü—Ä–µ–º–∏—É–º*',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return

        await bot.send_sticker(
            user_id,
            'CAACAgIAAxkBAAEFSfdi0bsg-RQUfeWR74EIrbr9xiRioQAClwADr8ZRGvSIdDD3EA8EKQQ',
            disable_notification=True,
            reply_markup=ReplyKeyboardRemove()
        )

        await message.answer(
            '‚≠ê *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*\n_–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:_',
            disable_notification=True,
            parse_mode='Markdown',
            reply_markup=markups.markup_search
        )

        await dialogue.parameters.set()

        async with state.proxy() as data:
            data['country'] = None
            data['gender'] = -1
            data['age'] = '-1:-1'

    else:
        '''
        –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—Å–µ—Å–µ–¥–Ω–∏–∫—É
        '''

        user_id = message.from_user.id
        session_exists = await sql.session_exists(user_id)

        if session_exists == False:
            await message.delete()
            await message.answer(
                '‚ùó *–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n'
                '_–í–≤–µ–¥–∏—Ç–µ_ /help_, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!_',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return

        chat_info = await sql.get_session(user_id)

        try:
            s = await state.get_data()
            async with state.proxy() as data:
                data['msgs'] = int(s['msgs']) + 1

        except Exception:
            await dialogue.in_dialogue.set()
            async with state.proxy() as data:
                data['msgs'] = 0

        try:
            if message.content_type == 'text':
                await bot.send_message(chat_info[1], message.text)

            elif message.content_type == 'sticker':
                await bot.send_sticker(
                    chat_info[1], message.sticker.file_id)

            elif message.content_type == 'document':
                await bot.send_document(chat_info[1], message.document.file_id, caption=message.caption)

            elif message.content_type == 'photo':
                file_id = None

                for item in message.photo:
                    file_id = item.file_id

                await bot.send_photo(chat_info[1], file_id, caption=message.caption)

            elif message.content_type == 'audio':
                await bot.send_audio(
                    chat_info[1], message.audio.file_id, caption=message.caption)

            elif message.content_type == 'video':
                await bot.send_video(
                    chat_info[1], message.video.file_id, caption=message.caption)

            elif message.content_type == 'voice':
                await bot.send_voice(
                    chat_info[1], message.voice.file_id)

        except exceptions.BotBlocked as e:
            await message.answer(
                '–û—à–∏–±–∫–∞! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –±–æ—Ç–∞! :—Å\n'
                '–°–µ—Å—Å–∏—è –±—ã–ª–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞!\n'
                '_–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!_',
                disable_notification=True,
                parse_mode='Markdown'
            )
            state_ban = dp.current_state(chat=chat_info[1], user=chat_info[1])
            await state_ban.finish()
            await sql.del_session(chat_info[1])
            await state.finish()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=set_name.enter_name)
async def settings_name(message: types.Message, state=FSMContext):

    msg_original = message.text
    characherRegex = re.compile(r'[^a-zA-Z–∞-—è–ê-–Ø.]')
    message.text = characherRegex.search(message.text)

    await message.delete()

    if not bool(message.text):

        await message.answer(f'‚ùó *–í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º \\-* ||{msg_original}||', disable_notification=True, parse_mode='MarkdownV2')
        sql.cur.execute('UPDATE OR IGNORE `users` SET `user_name` = ? WHERE `user_id` = ?',
                        (msg_original, message.from_user.id,))
        sql.db.commit()

        await state.finish()
        await asyncio.sleep(2)
        await message.answer('*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ?*', disable_notification=True, parse_mode='MarkdownV2', reply_markup=markups.markup_settings)
    else:
        await message.answer('–†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫—É—é –∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É, –±–µ–∑ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º', disable_notification=True)
        return


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=deposit.enter_sum)
async def on_enter_sum(message: types.Message, state=FSMContext):

    if message.text.isdigit() and int(message.text) > 0:

        async with state.proxy() as data:
            data['sum'] = int(message.text)

        pay_url = await p2p.create_bill(
            int(message.text),
            15,
            message.from_user.id
        )
        await message.answer('‚ùóÔ∏è *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞*', disable_notification=True, parse_mode='MarkdownV2', reply_markup=markups.deposit_pay(pay_url))
        await deposit.next()
        print('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!', disable_notification=True)
        return


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=add_user_info.enter_age)
async def add_age(message: types.Message, state=FSMContext):
    ''''''

    await message.delete()

    user_id = message.from_user.id
    age = message.text

    if not age.isdigit() or int(age) < 12 or int(age) > 65:
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!'
            '_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ—Å–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ 12 –ª–µ—Ç –∏ –º–ª–∞–¥—à–µ 65!_',
            disable_notification=True,
            parse_mode='Markdown'
        )
        return

    temp_data = await state.get_data()

    await sql.add_user_info(user_id, temp_data['country'], temp_data['gender'], age)
    await bot.send_message(config['CHAT_ID'], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!')
    await state.finish()

    await message.answer('üôå *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!*\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!',
                         parse_mode='Markdown',
                         disable_notification=True
                         )
    await asyncio.sleep(1)
    await cmd_menu(message, state)
    await asyncio.sleep(1)
    msg_1 = await message.answer(
        '‚òùÔ∏è *–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.* ‚òùÔ∏è'
        '\n\n_–í –Ω–µ–º —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∏—Å–∫—É!_ üòá'
        '\n\n*–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è* /menu*, –∏–ª–∏ –≤–≤–µ–¥–∏* /search',
        parse_mode='Markdown'
    )
    await asyncio.sleep(5)
    await msg_1.delete()
    msg_2 = await message.answer(
        '‚ùì *–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –≤–≤–µ–¥–∏* /help*, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å!*',
        disable_notification=True,
        parse_mode='Markdown'
    )


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=set_age.enter_age)
async def settings_age(message: types.Message, state=FSMContext):

    await message.delete()

    user_id = message.from_user.id
    age = message.text

    if not age.isdigit() or int(age) < 12:
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!'
            '_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ 12 –ª–µ—Ç!_',
            disable_notification=True,
            parse_mode='Markdown'
        )
        return

    user_info = await sql.get_user(user_id)
    user_gender = user_info[3]
    user_country = user_info[5]

    await sql.add_user_info(user_id, user_country, user_gender, age)
    await state.finish()
    await message.answer(f'‚ùó *–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç*', disable_notification=True, parse_mode='MarkdownV2')
    await asyncio.sleep(2)
    await message.answer('*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ?*', disable_notification=True, parse_mode='MarkdownV2', reply_markup=markups.markup_settings)


# --- CLBCKS ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_add_country_'), state=add_user_info.enter_country)
async def add_country(callback: types.CallbackQuery, state=FSMContext):
    '''
    '''

    await callback.message.delete()

    code = callback.data.replace('btn_add_country_', '')

    if code == 'ru':

        async with state.proxy() as data:
            data['country'] = 'ru'

    elif code == 'kz':

        async with state.proxy() as data:
            data['country'] = 'kz'

    elif code == 'bel':

        async with state.proxy() as data:
            data['country'] = 'bel'

    elif code == 'uk':

        async with state.proxy() as data:
            data['country'] = 'uk'

    elif code == 'usa':

        async with state.proxy() as data:
            data['country'] = 'usa'

    await bot.send_message(
        callback.from_user.id,
        '*–û—Ç–ª–∏—á–Ω–æ!*\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª üë´',
        disable_notification=True,
        parse_mode='Markdown',
        reply_markup=markups.add_gender()
    )
    await add_user_info.next()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_add_gender_'), state=add_user_info.enter_gender)
async def add_gender(callback: types.CallbackQuery, state=FSMContext):
    ''''''

    await callback.message.delete()

    code = callback.data.replace('btn_add_gender_', '')

    if code == 'male':

        async with state.proxy() as data:
            data['gender'] = 0

    elif code == 'female':

        async with state.proxy() as data:
            data['gender'] = 1

    await bot.send_message(
        callback.from_user.id,
        '*–°—É–ø–µ—Ä! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å!*\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 12 –¥–æ 65 üîû',
        disable_notification=True,
        parse_mode='Markdown'
    )
    await add_user_info.next()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deposit_select'))
async def deposit_select(callback: types.CallbackQuery, state=FSMContext):

    user_id = callback.from_user.id
    code = callback.data.replace('deposit_select_', '')

    if code == 'qiwi':
        await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', reply_markup=markups.menu_back)
        await deposit.enter_sum.set()
        await callback.answer()
    elif code == 'ukassa':
        await bot.send_message(user_id, '‚ùó –î–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', disable_notification=True)
        await state.finish()
        await callback.answer()
        return
    else:
        await bot.send_message(user_id, '‚ùó –î–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', disable_notification=True)
        await state.finish()
        await callback.answer()
        return


@rate_limit(limit=2)
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deposit_pay_'), state=deposit.checkout)
async def deposit_pay(callback: types.CallbackQuery, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    '''

    user_id = callback.from_user.id
    code = callback.data.replace('deposit_pay_', '')
    bill_id = await sql.get_bill_info(user_id)
    bill_id = bill_id[1]

    if code == 'checkout':
        if bill_id == False:
            await callback.message.edit_text('–ó–∞—è–≤–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å, –ª–∏–±–æ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=ReplyKeyboardRemove())
            await state.finish()
            return

        elif p2p.p2p.check(bill_id=bill_id).status == 'PAID':

            sum = await sql.get_bill_info(user_id)

            try:
                sum = sum[2]
            except:
                sum = 0

            await callback.message.delete()
            await bot.send_message(
                user_id,
                '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! \n–í–æ–∑–≤—Ä–∞—à–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..',
                disable_notification=True,
                reply_markup=markups.menu()
            )
            await sql.add_user_balance(user_id, int(sum))
            await sql.del_bill(user_id)
            await state.finish()

            return

        else:
            pay_url = p2p.p2p.check(bill_id).pay_url
            await callback.message.delete()
            await bot.send_message(
                user_id,
                '–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!',
                reply_markup=markups.deposit_pay(pay_url)
            )

            return

    elif code == 'cancel':
        await state.finish()

        pod_menu = ReplyKeyboardMarkup(
            selective=True,
            resize_keyboard=True
        ).add('üîç –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞').add('‚≠ê –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')

        if bill_id == False:
            await callback.message.edit_text('‚ùóÔ∏è *–ó–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–º–µ–Ω–µ–Ω–∞*', parse_mode='MarkdownV2', reply_markup=pod_menu)
            return

        p2p.p2p.reject(bill_id=bill_id)
        await sql.del_bill(user_id)
        await callback.message.delete()
        await bot.send_message(user_id, '‚ùóÔ∏è *–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–º–µ–Ω–µ–Ω–∞*', parse_mode='MarkdownV2', reply_markup=pod_menu)
        await callback.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('profile_'))
async def profile(callback: types.CallbackQuery, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    '''

    code = callback.data.replace('profile_', '')

    if code == 'deposit':
        await callback.message.edit_text('*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*', parse_mode='MarkdownV2', reply_markup=markups.markup_deposit_select)
        await callback.answer()
    elif code == 'settings':
        await callback.message.edit_text('*–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:*', parse_mode='MarkdownV2', reply_markup=markups.markup_settings)
        await callback.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('settings_'), state=None)
async def settings(callback: types.CallbackQuery, state=FSMContext):

    await callback.message.delete()

    code = callback.data.replace('settings_', '')
    user_id = callback.from_user.id

    if code == 'age':
        await bot.send_message(user_id, '*_–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –≤ —á–∞—Ç:_*', parse_mode='MarkdownV2', disable_notification=True)
        await set_age.enter_age.set()
    elif code == 'gender':
        await bot.send_message(user_id, '*_–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª_*', parse_mode='MarkdownV2', disable_notification=True, reply_markup=markups.markup_settings_gender)
    elif code == 'name':
        await set_name.enter_name.set()
        await bot.send_message(user_id, '*_–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ —á–∞—Ç:_*', parse_mode='MarkdownV2', disable_notification=True, reply_markup=ReplyKeyboardRemove())
    elif code == 'country':
        await bot.send_message(user_id, '*_–û—Ç–∫—É–¥–∞ –≤—ã?_*', parse_mode='MarkdownV2', disable_notification=True, reply_markup=markups.markup_settings_country)

    await callback.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_settings_country_'))
async def settings_country(callback: types.CallbackQuery, state=FSMContext):

    code = callback.data.replace('btn_settings_country_', '')
    await callback.message.delete()

    user_info = await sql.get_user(callback.from_user.id)
    user_gender = user_info[3]
    user_age = user_info[4]

    await sql.add_user_info(callback.from_user.id, code, user_gender, user_age)
    await callback.answer()
    await bot.send_message(callback.from_user.id, '‚ùó *–ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*', disable_notification=True, parse_mode='MarkdownV2')
    await asyncio.sleep(2)
    await bot.send_message(callback.from_user.id, '*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ?*', disable_notification=True, parse_mode='MarkdownV2', reply_markup=markups.markup_settings)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_settings_gender_'))
async def settings_gender(callback: types.CallbackQuery, state=FSMContext):

    code = callback.data.replace('btn_settings_gender_', '')

    user_info = await sql.get_user(callback.from_user.id)
    user_age = user_info[4]
    user_country = user_info[5]

    await callback.message.delete()

    if code == 'male':
        await sql.add_user_info(callback.from_user.id, user_country, 0, user_age)
    elif code == 'female':
        await sql.add_user_info(callback.from_user.id, user_country, 1, user_age)

    await state.finish()
    await callback.answer()
    await bot.send_message(callback.from_user.id, '‚ùó *–ù–æ–≤—ã–π –ø–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*', disable_notification=True, parse_mode='MarkdownV2')
    await asyncio.sleep(2)
    await bot.send_message(callback.from_user.id, '*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ?*', disable_notification=True, parse_mode='MarkdownV2', reply_markup=markups.markup_settings)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_search_'), state=dialogue.parameters)
async def search_param(callback: types.CallbackQuery, state=FSMContext):

    code = callback.data.replace('btn_search_', '')
    user_id = callback.from_user.id
    markup_cancel = ReplyKeyboardMarkup(
        resize_keyboard=True, selective=True).add('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')

    if code == 'country':
        await callback.message.edit_text('–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É:', reply_markup=markups.markup_s_country)
        await callback.answer()

    elif code == 'gender':
        await callback.message.edit_text('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É:', reply_markup=markups.markup_s_gender)
        await callback.answer()

    elif code == 'age':
        await callback.message.delete()
        await dialogue.parameters_age.set()
        await bot.send_message(
            user_id,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∏–∞–ø–æ–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–æ–≤, –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!'
            '\n–ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∏–∞–ø–æ–∑–æ–Ω—É: 18-24'
            '\n–ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–∑—Ä–∞—Å—Ç—É: 20',
            disable_notification=True
        )
        await callback.answer()

    else:
        await callback.answer()
        await callback.message.delete()
        info = await state.get_data()

        if await sql.session_exists(user_id):
            await bot.send_message(
                user_id,
                '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /stop, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π!',
                disable_notification=True
            )

            return

        user_info = await sql.get_user(user_id)

        await bot.send_message(
            user_id,
            'üîç _–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.._',
            disable_notification=True,
            parse_mode='Markdown',
            reply_markup=markup_cancel
        )

        chat_two = await sql.get_queue(info['gender'], info['age'], info['country'])

        if chat_two == 0:
            res = info['age']
            res = res.split(':')
            await sql.add_queue_premium(user_id, info['gender'], res[0], res[1], info['country'])
            await dialogue.in_search.set()

            return

        markup_stop = ReplyKeyboardMarkup(
            resize_keyboard=True, selective=True).add('üõë –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')

        session = await sql.create_session(user_id, chat_two)

        if session:
            try:
                state_1 = dp.current_state(chat=user_id, user=user_id)
                state_2 = dp.current_state(chat=chat_two, user=chat_two)
                await state_1.set_state(dialogue.in_dialogue)
                await state_2.set_state(dialogue.in_dialogue)

                async with state_1.proxy() as data:
                    data['time'] = int(time.time())
                    data['msgs'] = 0
                async with state_2.proxy() as data:
                    data['time'] = int(time.time())
                    data['msgs'] = 0

            except exceptions.BotBlocked as e:
                await sql.del_queue(chat_two)
                await sql.del_session(chat_two)
                await dialogue.in_search.set()
                res = info['age']
                res = res.split(':')
                await sql.add_queue_premium(user_id, info['gender'], res[0], res[1], info['country'])

                return

            markup_stop = ReplyKeyboardMarkup(
                resize_keyboard=True,
                selective=True

            ).add('üõë –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞')

            try:
                await bot.send_message(
                    chat_two,
                    'üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/next - –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                    disable_notification=True,
                    reply_markup=markup_stop
                )

            except exceptions.BotBlocked as e:
                await sql.del_queue(chat_two)
                await sql.del_session(chat_two)

                await state_1.set_state(dialogue.in_search)
                res = info['age']
                res = res.split(':')
                await sql.add_queue_premium(user_id, info['gender'], res[0], res[1], info['country'])

                return

            try:
                await bot.send_message(
                    user_id,
                    'üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n/next - –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥',
                    disable_notification=True,
                    reply_markup=markup_stop
                )

            except exceptions.BotBlocked as e:
                chat_two_info = sql.get_user(chat_two)
                await sql.del_queue(user_id)
                await sql.del_session(user_id)

                await state_2.set_state(dialogue.in_search)
                await sql.add_queue(chat_two, chat_two_info[3], chat_two_info[4], chat_two_info[5])

                return


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_s_'), state=dialogue.parameters)
async def search_enter(callback: types.CallbackQuery, state=FSMContext):

    code = callback.data.replace('btn_s_', '')

    if code.startswith('country'):

        if code == 'country_any':
            async with state.proxy() as data:
                data['country'] = None
        else:
            async with state.proxy() as data:
                data['country'] = code.replace('country_', '')

    elif code.startswith('gender'):

        code = code.replace('gender_', '')

        if code == 'male':
            async with state.proxy() as data:
                data['gender'] = 0
        elif code == 'female':
            async with state.proxy() as data:
                data['gender'] = 1
        elif code == 'any':
            async with state.proxy() as data:
                data['gender'] = -1

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:', reply_markup=markups.markup_search)
    msg_del = await bot.send_message(
        callback.from_user.id,
        '_–ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!_\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º!',
        parse_mode='Markdown',
        disable_notification=True
    )
    await asyncio.sleep(1.5)
    await msg_del.delete()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('sub_'), state=None)
async def buy_plan(callback: types.CallbackQuery):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    '''

    code = callback.data.replace('sub_', '')
    user_id = callback.from_user.id

    user_info = await sql.get_user(user_id)
    plan_data = await sql.get_plans()
    plan_time = plan_data[int(code)][2]
    plan_price = plan_data[int(code)][3]

    if not user_info:
        return

    if user_info[7] != 0 and plan_price == 0:
        await bot.send_message(user_id, '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!\n\n_–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å_ ‚≠ê *–ü—Ä–µ–º–∏—É–º* _- –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!_', disable_notification=True, parse_mode='Markdown')
        return

    elif user_info[7] == 0 and plan_price == 0:
        ads_markup = await markups.get_ads_for_sub()

        if ads_markup == False:
            await sql.update_user_sub(user_id, plan_time)
            await sql.add_user_balance(user_id, -plan_price)

            await bot.send_sticker(user_id, 'CAACAgIAAxkBAAEFSfdi0bsg-RQUfeWR74EIrbr9xiRioQAClwADr8ZRGvSIdDD3EA8EKQQ')
            await bot.send_message(user_id, '‚≠ê *–ü—Ä–µ–º–∏—É–º* –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', disable_notification=True, parse_mode='Markdown')
            await asyncio.sleep(2)
            await bot.send_message(user_id, '_–û–±–æ –≤—Å–µ—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö_ ‚≠ê *–ü—Ä–µ–º–∏—É–º* _–≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ /menu_', parse_mode='Markdown', disable_notification=True)

            return

        await bot.send_message(user_id, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!', disable_notification=True, reply_markup=ads_markup)

    elif user_info[6] < plan_price:
        await bot.send_message(user_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ /profile')
        return

    else:
        await sql.update_user_sub(user_id, plan_time)
        await sql.add_user_balance(user_id, -plan_price)

        await bot.send_sticker(user_id, 'CAACAgIAAxkBAAEFSfdi0bsg-RQUfeWR74EIrbr9xiRioQAClwADr8ZRGvSIdDD3EA8EKQQ')
        await bot.send_message(user_id, '‚≠ê *–ü—Ä–µ–º–∏—É–º* –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', disable_notification=True, parse_mode='Markdown')
        await asyncio.sleep(2)
        await bot.send_message(user_id, '_–û–±–æ –≤—Å–µ—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö_ ‚≠ê *–ü—Ä–µ–º–∏—É–º* _–≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ /menu_', parse_mode='Markdown', disable_notification=True)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn_check_sub'))
async def buy_plan_sub(callback: types.CallbackQuery, state=FSMContext):
    '''
    –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    '''

    user_id = callback.from_user.id
    ads_list = await sql.get_ads()
    counter = 0

    if ads_list == None:
        await bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!', disable_notification=True)

        return

    for i in range(len(ads_list)):
        await asyncio.sleep(0.2)
        user_channel_status = await bot.get_chat_member(ads_list[i][4], user_id=user_id)
        if user_channel_status['status'] != 'left':
            counter += 1

    if counter == len(ads_list):
        plan_data = await sql.get_plans()
        await sql.update_user_sub(user_id, 1)

        await bot.send_sticker(user_id, 'CAACAgIAAxkBAAEFSfdi0bsg-RQUfeWR74EIrbr9xiRioQAClwADr8ZRGvSIdDD3EA8EKQQ')
        await bot.send_message(user_id, '‚≠ê *–ü—Ä–µ–º–∏—É–º* –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', disable_notification=True, parse_mode='Markdown')
        await asyncio.sleep(2)
        await bot.send_message(user_id, '_–û–±–æ –≤—Å–µ—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö_ ‚≠ê *–ü—Ä–µ–º–∏—É–º* _–≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ /menu_', parse_mode='Markdown', disable_notification=True)

        return

    await callback.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!')
    await callback.message.delete()
    await bot.send_message(
        user_id,
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!',
        reply_markup=await markups.get_ads_for_sub()
    )


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=dialogue.parameters_age)
async def search_enter_age(message: types.Message, state=FSMContext):

    user_id = message.from_user.id
    age = message.text
    result = '-1:-1'

    if not age.isdigit():

        age = age.split('-')
        if len(age) != 2 or not age[0].isdigit() or not age[1].isdigit():
            await message.answer(
                '_–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∏–∞–ø–æ–∑–æ–Ω—É:_ *24-35*'
                '\n_–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –±—É–∫–≤—ã!_',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return
        if int(age[0]) < 12 or int(age[1]) < 12:
            await message.answer(
                '_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 12!_',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return
        if int(age[0]) > int(age[1]):
            await message.answer(
                '_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∏ –¥–æ. –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!_',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return

        result = f'{age[0]}:{age[1]}'

    else:
        if int(age) < 12:
            await message.answer(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!'
                '\n_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 12!_',
                disable_notification=True,
                parse_mode='Markdown'
            )

            return

        result = f'{age}:{age}'

    async with state.proxy() as data:
        data['age'] = result

    await dialogue.previous()
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:', disable_notification=True, reply_markup=markups.markup_search)
    msg_del = await bot.send_message(
        user_id,
        '_–ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!_\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º!',
        parse_mode='Markdown',
        disable_notification=True
    )
    await asyncio.sleep(1.5)
    await msg_del.delete()


# --- CLBCKS FOR MENU ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu_'))
async def menu_all(callback: types.CallbackQuery, state=FSMContext):
    '''
    –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
    '''

    code = callback.data.replace('menu_', '')
    user_id = callback.from_user.id

    if code == 'profile':
        await callback.message.delete()
        await cmd_profile(callback.message, state, callback.from_user.id)

    elif code == 'help':
        await callback.message.delete()
        await cmd_help(callback.message, state)

    elif code == 'support':
        await callback.message.edit_text(
            '''
‚ô®Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –º—ã—Å–ª—è–º–∏ –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é —Å @DisignerNikita19
üëæ –ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥, –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫—É - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–∏—Ö @membersonly5
üìß –õ—é–±—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–≤ —Ç.—á. –ø–æ —Ä–µ–∫–ª–∞–º–µ) - @DisignerNikita19
            ''',
            reply_markup=markups.markup_back_help
        )
    elif code == 'subscribe':
        await callback.message.edit_text(
            '''
‚≠ê –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ *–ü—Ä–µ–º–∏—É–º*:

1. –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (–ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É, —Å—Ç—Ä–∞–Ω–µ)
2. –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–∏—Ñ
3. –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–∞—Ü–∏—è –æ —Å–µ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–æ–≥–µ
4. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
5. –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ –±–∞–Ω—É (–±–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è)

üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ (/profile).

üïë –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:
            ''',
            parse_mode='Markdown',
            reply_markup=await markups.get_plans()
        )

    elif code == 'rules':
        await cmd_rules(callback.message, state)
        # await callback.message.delete()

    else:
        await callback.message.edit_text('*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=markups.menu())


# --- Admin CLBCKS and MSGs ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('admin_menu_'), state=None)
async def ap_btns(callback: types.CallbackQuery, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    '''

    code = callback.data.replace('admin_menu_', '')
    user_id = callback.from_user.id

    if code == 'editplan':
        await callback.message.edit_text('–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫:', reply_markup=await markups.get_plans(False))
        await edit_plans_adm.enter_edit.set()

    elif code == 'stat':
        await cmd_stat(callback.message, state)

    elif code == 'broadcast':
        await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*', parse_mode='Markdown', reply_markup=markups.markup_cancel)
        await ap_broadcast.enter_text.set()

    elif code == 'ads':
        await callback.answer('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        await callback.message.edit_text('„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', parse_mode='Markdown', reply_markup=await markups.get_ads())


# bcast start
@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=ap_broadcast.enter_text, content_types=['text', 'sticker', 'video', 'photo', 'audio', 'voice', 'document'])
async def ap_bcast_text(message: types.Message, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    '''

    count = await sql.get_stats()

    if message.content_type == 'photo':
        file_id = None

        for item in message.photo:
            file_id = item.file_id

        await message.answer_photo(file_id, disable_notification=True, caption=message.caption, parse_mode='Markdown', reply_markup=markups.markup_confirm)
        async with state.proxy() as data:
            data['photo'] = file_id
            data['caption'] = message.caption
            data['text'] = None

    elif message.content_type == 'text':
        await message.answer(
            f'*–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* _{count[1]}_\n\n'
            f'*–¢–µ–∫—Å—Ç:*\n'
            f'{message.text}',
            disable_notification=True,
            parse_mode='Markdown',
            reply_markup=markups.markup_confirm
        )
        async with state.proxy() as data:
            data['text'] = message.text

    await ap_broadcast.next()


@dp.callback_query_handler(lambda c: c.data, state=ap_broadcast.enter_text)
async def ap_bcast_text_cancel(callback: types.CallbackQuery, state=FSMContext):
    '''
    –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π
    '''

    await state.finish()
    try:
        await callback.message.edit_text('„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', reply_markup=markups.markup_admin_panel)

    except Exception:
        await callback.message.delete()
        await bot.send_message(callback.from_user.id, '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', disable_notification=True, reply_markup=markups.markup_admin_panel)


@dp.callback_query_handler(lambda c: c.data, state=ap_broadcast.confirm)
async def ap_bcast_confirm(callback: types.CallbackQuery, state=FSMContext):
    '''
    –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    '''

    user_id = callback.from_user.id
    code = callback.data.replace('btn_', '')
    data = await state.get_data()

    await callback.message.delete()

    if code == 'cancel':
        await bot.send_message(user_id, '‚ùó *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É*', disable_notification=True, parse_mode='Markdown')
        await state.finish()

    elif code == 'confirm':
        msg_1 = await bot.send_message(user_id, '‚ùó *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥*', disable_notification=True, parse_mode='Markdown')
        await asyncio.sleep(1)

        for i in range(9, 0, -1):
            await msg_1.edit_text(f'‚ùó *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ {i} —Å–µ–∫—É–Ω–¥*', parse_mode='Markdown')
            await asyncio.sleep(1)

        await state.finish()
        await msg_1.delete()
        msg_2 = await bot.send_message(user_id, '‚ùó *–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å..*', disable_notification=True, parse_mode='Markdown')

        users = await sql.get_user_list()

        if data['text'] == None:
            for i in range(len(users)):
                await asyncio.sleep(0.2)
                try:
                    await bot.send_photo(users[i][0], photo=data['photo'], caption=data['caption'], parse_mode='Markdown')
                except Exception as e:
                    logger.error(e)

        else:
            for i in range(len(users)):
                await asyncio.sleep(0.2)
                try:
                    await bot.send_message(users[i][0], text=data['text'], parse_mode='Markdown')
                except Exception as e:
                    logger.error(e)

        await msg_2.delete()
        await bot.send_message(user_id, '‚úîÔ∏è *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*', disable_notification=True, parse_mode='Markdown')
# bcast end


# edit-plan start
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('sub_'), state=edit_plans_adm.enter_edit)
async def edit_plan(callback: types.CallbackQuery, state=FSMContext):
    '''
    '''

    code = callback.data.replace('sub_', '')
    user_id = callback.from_user.id

    plan_info = await sql.get_plans()
    plan_id = plan_info[int(code)][0]
    plan_name = plan_info[int(code)][1]
    plan_time = plan_info[int(code)][2]
    plan_price = plan_info[int(code)][3]

    await callback.message.delete()
    await bot.send_message(user_id,
                           f'''
ID: {plan_id}
NAME: {plan_name}
TIME: {plan_time}
PRICE: {plan_price}
    ''',
                           disable_notification=True
                           )
    async with state.proxy() as data:
        data['id'] = plan_id
    await bot.send_message(user_id, '–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
    await edit_plans_adm.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=edit_plans_adm.enter_name)
async def ep_enter_name(message: types.Message, state=FSMContext):

    user_id = message.from_user.id

    async with state.proxy() as data:
        data['name'] = message.text

    await message.delete()
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö (–ß–ò–°–õ–û–ú –û–¢ 1 –î–û —Å–∫–æ–ª—å–∫–∏ —É–≥–æ–¥–Ω–æ)')
    await edit_plans_adm.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=edit_plans_adm.enter_time)
async def ep_enter_time(message: types.Message, state=FSMContext):

    user_id = message.from_user.id

    if not message.text.isdigit():
        await message.answer('–ß–ò–°–õ–û–ú –ë–õ–Ø–¢–¨!')
        return

    async with state.proxy() as data:
        data['time'] = int(message.text)

    await message.delete()
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É: (—á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ ~)')
    await edit_plans_adm.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=edit_plans_adm.enter_price)
async def ep_enter_price(message: types.Message, state=FSMContext):

    user_id = message.from_user.id

    if not message.text.isdigit():
        await message.answer('–ß–ò–°–õ–û–û–û–û!')
        return

    async with state.proxy() as data:
        data['price'] = int(message.text)

    await message.delete()
    await message.answer('–ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:')

    i = await state.get_data()
    await bot.send_message(user_id,
                           f'''
ID: {i['id']}
NAME: {i['name']}
TIME: {i['time']} –¥–Ω.
PRICE: {i['price']} —Ä—É–±.
    ''',
                           disable_notification=True
                           )
    await sql.edit_plan(i['id'], i['name'], i['time'], i['price'])

    await state.finish()
# edit-plan end


# ads-cabinet clbcks start
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ap_ads_'), state=None)
async def ads_enter_ad(callback: types.CallbackQuery, state: FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    '''

    user_id = callback.from_user.id
    code = callback.data.replace('ap_ads_', '')

    if code == 'add':
        await callback.answer('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏..')
        await callback.message.edit_text('‚ùó *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:*', parse_mode='Markdown')
        await ap_add_ads.enter_name.set()

    elif code == 'cancel':
        await callback.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞!')
        await callback.message.edit_text('„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', reply_markup=markups.markup_admin_panel)

    elif code.startswith('del'):
        code = code.replace('del_', '')
        company_info = await sql.get_ad_info(int(code))
        await sql.remove_ads(company_info[0])
        await callback.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é', show_alert=True)
        await callback.message.edit_text('„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', reply_markup=markups.markup_admin_panel)

    else:
        company_info = await sql.get_ad_info(int(code))

        if not company_info:
            await callback.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç!')
            return

        await callback.message.edit_text(
            f'‚ùó *–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è* {company_info[1]} \n\n'
            f'*–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:* {0} \n'
            f'*–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:* {0}',
            parse_mode='MarkdownV2',
            reply_markup=await markups.markup_company(code)
        )


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=ap_add_ads.enter_name)
async def ads_enter_name(message: types.Message, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    '''

    user_id = message.from_user.id

    async with state.proxy() as data:
        data['ad_name'] = message.text

    await message.delete()
    await message.answer(f'‚ùó *–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:* _{message.text}_\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —á–∞—Å–∞—Ö:', disable_notification=True, parse_mode='Markdown')
    await ap_add_ads.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=ap_add_ads.enter_time)
async def ads_enter_time(message: types.Message, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    '''

    user_id = message.from_user.id
    code = message.text

    await message.delete()

    if not code.isdigit():
        await message.answer('‚ùó *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —á–∏—Å–ª–æ–º!*')

        return

    async with state.proxy() as data:
        data['ad_time'] = int(code)

    await message.answer(
        f'‚ùó *–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:* _{code}_\n\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:\n\n'
        '_–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:_ `https://t.me/channel_name`',
        disable_notification=True,
        parse_mode='Markdown'
    )
    await ap_add_ads.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=ap_add_ads.enter_url)
async def ads_enter_url(message: types.Message, state=FSMContext):

    user_id = message.from_user.id
    url = message.text

    await message.delete()

    if not url.startswith('https://t.me'):
        await message.answer('‚ùó *–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å* https://t.me', disable_notification=True, parse_mode='Markdown')
        return

    url = url.strip().lower()

    async with state.proxy() as data:
        data['ad_url'] = url

    await message.answer(
        f'‚ùó *–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ [—ç—Ç—É]({url}) —Å—Å—ã–ª–∫—É*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞:',
        disable_notification=True,
        parse_mode='MarkdownV2'
    )

    await ap_add_ads.next()


@dp.message_handler(filters.ChatTypeFilter(types.ChatType.PRIVATE), state=ap_add_ads.enter_chat_id)
async def ads_enter_chat_id(message: types.Message, state=FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ chat_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    '''

    user_id = message.from_user.id
    chat_id = message.text

    try:
        chat_id_int = int(chat_id)
    except ValueError as e:
        await message.answer('‚ùó *–ó–Ω–∞—á–µ–Ω–∏–µ ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º!*', disable_notification=True, parse_mode='Markdown')
        return

    if not chat_id.startswith('-100'):
        await message.answer('‚ùó *–ó–Ω–∞—á–µ–Ω–∏–µ ID –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100!*', disable_notification=True, parse_mode='Markdown')

        return

    async with state.proxy() as data:
        data['ad_chat_id'] = chat_id_int

    vault = await state.get_data()

    await message.answer(
        f'‚ùó *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏* \n\n*–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:* {vault["ad_name"]} \n*–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:* {vault["ad_time"]} *—á* \n*–°—Å—ã–ª–∫–∞ –Ω–∞* [–∫–∞–Ω–∞–ª]({vault["ad_url"]})',
        disable_notification=True,
        parse_mode='MarkdownV2',
        reply_markup=markups.markup_confirm
    )

    await ap_add_ads.next()


@dp.callback_query_handler(state=ap_add_ads.confirm)
async def ads_create_confirm(callback: types.CallbackQuery, state=FSMContext):
    '''
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    '''

    user_id = callback.from_user.id
    code = callback.data
    data = await state.get_data()

    if code == 'btn_confirm':
        await callback.answer('–ù–æ–≤–∞—è —Ä–µ–∫–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
        await callback.message.delete()
        msg_1 = await bot.send_message(
            user_id,
            f'‚ùó *–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è* _{data["ad_name"]}_ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n'
            '_–†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.._',
            disable_notification=True,
            parse_mode='Markdown'
        )
        await sql.add_ads(data['ad_name'], data['ad_time'], data['ad_url'], data['ad_chat_id'])
        await state.finish()
        await asyncio.sleep(3)
        await msg_1.delete()
        await bot.send_message(user_id, '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', disable_notification=True, reply_markup=await markups.get_ads())

        return

    await callback.answer('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
    await callback.message.delete()
    await bot.send_message(user_id, '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è „Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è', disable_notification=True, reply_markup=await markups.get_ads())
    await state.finish()


# ads-cabinet clbcks end


# --- –°–æ–±—ã—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@dp.errors_handler(exception=exceptions.BotBlocked)
async def on_bot_blocked(update: types.Update, exception: exceptions.BotBlocked):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    '''

    print('–°—Ä–∞–±–æ—Ç–∞–ª —Ö–µ–Ω–¥–ª–µ—Ä BotBlocked')

    user_id = update.message.from_user.id
    await sql.del_session(user_id)

    stat = await sql.get_stats()
    new = stat[1] + 1

    sql.cur.execute('UPDATE `stats` SET `blocked` = ?', (new,))
    sql.db.commit()


# --- –ê–Ω—Ç–∏–±–æ—Ç ---
@dp.callback_query_handler(markups.confirming_callback.filter(), state=[anti_bot.in_process, anti_bot.in_process_2])
async def user_confirm(callback: types.CallbackQuery, callback_data: dict):
    '''
    –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∞–Ω—Ç–∏–±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–µ
    '''

    user_id = int(callback_data.get('user_id'))
    # –ü—Ä–µ–¥–º–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    subject = callback_data.get('subject')
    necessary_subject = callback_data.get('necessary_subject')
    state = dp.current_state(user=callback.from_user.id,
                             chat=callback.message.chat.id)

    logger.debug(
        f'User {callback.from_user.first_name} clicked on button: {subject}({necessary_subject})')

    if subject == necessary_subject:  # –ù–∞–∂–∞–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        logger.debug(
            f'Rights have been granted to the user @{callback.from_user.first_name}:{callback.from_user.id}')
        await bot.send_message(callback.from_user.id, 'ü§ñ *–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É*\n\n–ö–æ–º–∞–Ω–¥—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!', disable_notification=True, parse_mode='Markdown')
        await state.finish()

    else:
        if str(await state.get_state()) == 'anti_bot:in_process':
            await state.set_state(anti_bot.in_process_2)
            await callback.answer()
            await callback.message.delete()

            generated_tuple = markups.generate_confirm_markup(
                callback.from_user.id)
            markup = generated_tuple[0]
            subject = generated_tuple[1]
            await bot.send_message(callback.from_user.id, f'‚ùó *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞*\n\n*–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç*\n\n_–ù–∞–π–¥–∏—Ç–µ_ *{subject}* _–Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ!_', parse_mode='Markdown', reply_markup=markup)

            return
        else:
            await bot.send_message(callback.from_user.id, '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @membersonly5', disable_notification=True)
            await state.set_state(anti_bot.banned)
        # logger.debug(f'The user @{callback.from_user.first_name}:{callback.from_user.id} clicked on the wrong object '
        #             f'and was banned until {until_date}')

    # –∏ —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏
    await callback.answer()
    await callback.message.delete()
